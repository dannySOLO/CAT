openapi: 3.0.2
info:
  title: Miniapp APIs
  version: '1.0'
servers:
  - url: http://localhost:3000/api/v1
    description: Frontend proxy
  - url: http://localhost:9090/v1
    description: Backend dev
  - url: https://svc.adsota.com/api/miniapp/v1
    description: Production
tags:
  - name: userService
  - name: appService
  - name: sdkService
components:
  securitySchemes:
    apiKey:
      type: apiKey
      name: Authorization
      in: header

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        ts:
          type: string
          format: date-time
    MainApp:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        icon:
          type: string
        status:
          type: string
          enum: ['IN_DEVELOPMENT', 'IN_REVIEW', 'PUBLISHED']
        clientKey:
          type: string
        clientSecret:
          type: string
        builds:
          type: array
          items:
            $ref: '#/components/schemas/MainAppBuild'
        ts:
          type: string
          format: date-time
    MainAppBuild:
      type: object
      properties:
        id:
          type: string
        platform:
          type: string
          enum: ['IOS', 'ANDROID']
        status:
          type: string
          enum: ['IN_DEVELOPMENT', 'IN_REVIEW', 'PUBLISHED']
        appVersion:
          type: string
        appVersionNumber:
          type: number
        sdkVersion:
          type: string
          format: semver
        reactBundleVersion:
          type: string
          format: semver
        ts:
          type: string
          format: date-time
    UserRole:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: ['OWNER', 'ADMIN', 'DEVELOPER']
        ts:
          type: string
          format: date-time
    MiniApp:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        icon:
          type: string
        platforms:
          type: array
          items:
            type: string
            enum: ['IOS', 'ANDROID']
        desc:
          type: string
        version:
          type: string
          format: semver
        ts:
          type: string
          format: date-time

security:
  - apiKey: []

paths:
  /login:
    post:
      tags:
        - userService
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                googleIdToken:
                  type: string
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /me:
    get:
      tags: ['userService']
      summary: Get current user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /logout:
    post:
      tags: ['userService']
      responses:
        200:
          description: OK
  /main_apps:
    get:
      tags: ['appService']
      summary: Get list of main apps
      parameters:
        - name: limit
          in: query
          schema:
            type: string
        - name: skip
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                    format: int64
                  apps:
                    type: array
                    items:
                      $ref: '#/components/schemas/MainApp'
    post:
      tags: ['appService']
      summary: Create new main app
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ['name']
              properties:
                name:
                  type: string

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainApp'
  /main_apps/{appId}:
    parameters:
      - name: appId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: ['appService']
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainApp'
  /main_apps/{appId}/users:
    parameters:
      - name: appId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: ['appService']
      summary: add User to MainApp
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ['email', 'role']
              properties:
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: ['ADMIN', 'DEVELOPER']
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
  /main_apps/{appId}/users/{userId}:
    parameters:
      - name: appId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: ['appService']
      summary: update user's role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ['role']
              properties:
                role:
                  type: string
                  enum: ['ADMIN', 'DEVELOPER']
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
    delete:
      tags: ['appService']
      summary: remove user
      responses:
        200:
          description: OK
  /main_apps/{appId}/mini_apps:
    parameters:
      - name: appId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: ['appService']
      parameters:
        - name: limit
          in: query
          schema:
            type: string
        - name: skip
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                  apps:
                    type: array
                    items:
                      $ref: '#/components/schemas/MiniApp'
    post:
      tags: ['appService']
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                platforms:
                  type: array
                  items:
                    type: string
                    enum: ['IOS', 'ANDROID']
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MiniApp'
  /main_apps/{appId}/builds/{buildId}:
    parameters:
      - name: appId
        in: path
        required: true
        schema:
          type: string
      - name: buildId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: ['appService']
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  builds:
                    type: array
                    items:
                      $ref: '#/components/schemas/MainAppBuild'
  /main_apps/{appId}/publish:
    parameters:
      - name: appId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: ['appService']
      summary: Publish a MainApp
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                iosBuildId:
                  type: string
                androidBuildId:
                  type: string
                iosInstallUrl:
                  type: string
                androidInstallUrl:
                  type: string
                sdkSchema:
                  type: string
                  format: yaml
      responses:
        200:
          description: OK
  /sdk/init:
    post:
      summary: Init sdk
      description: ''
      operationId: init_sdk
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - clientKey
                - clientSecret
                - platform
                - appVersion
                - appVersionNumber
                - sdkVersion
                - deviceId
                - reactBundleVersion
              properties:
                clientKey:
                  type: string
                clientSecret:
                  type: string
                platform:
                  type: string
                  enum:
                    - IOS
                    - ANDROID
                appVersion:
                  type: string
                appVersionNumber:
                  type: number
                  format: int64
                  example: 10
                reactBundleVersion:
                  type: string
                  format: semver
                  description: Version of your react native app's bundle
                  example: 1.0.0
                sdkVersion:
                  type: string
                  format: semver
                  example: 1.0.0
                deviceId:
                  type: string
                  description: ANDROD_ID (android) or UUID (iOS)
                  example: 3414de61-4fa0-48d7-90f5-a93d3a500f47
                isDevelopment:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  appId:
                    type: string
                  deviceId:
                    type: string
                  build:
                    $ref: '#/components/schemas/MainAppBuild'

      tags:
        - sdkService
